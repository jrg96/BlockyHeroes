// <auto-generated />
using System;
using BlockyHeroesBackend.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlockyHeroesBackend.Infrastructure.Migrations
{
    [DbContext(typeof(BlockyHeroesDbContext))]
    [Migration("20240329205126_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.BannerDropRate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DropRate")
                        .HasColumnType("real");

                    b.Property<Guid>("GachaBannerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GachaBannerId");

                    b.ToTable("BannerDropRates");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GachaBanners");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBannerCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GachaBannerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("RateUp")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterLevelId");

                    b.HasIndex("GachaBannerId");

                    b.ToTable("GachaBannerCharacter");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBannerCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GachaBannerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityPerPull")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GachaBannerId");

                    b.HasIndex("ItemId");

                    b.ToTable("GachaBannerCurrency");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HorizontalSpeed")
                        .HasColumnType("real");

                    b.Property<float>("JumpForce")
                        .HasColumnType("real");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Lives")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterLevels");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevelRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterLevelId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterLevelRequirements");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Equip.Equip", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Equips");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Equip.EquipLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CoinsToPromote")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EquipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HorizontalSpeed")
                        .HasColumnType("real");

                    b.Property<float>("JumpForce")
                        .HasColumnType("real");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Lives")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipId");

                    b.ToTable("EquipLevels");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Item.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Coins")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxStamina")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEquipmentIdSlot1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEquipmentIdSlot2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CharacterLevelId");

                    b.HasIndex("UserEquipmentIdSlot1")
                        .IsUnique()
                        .HasFilter("[UserEquipmentIdSlot1] IS NOT NULL");

                    b.HasIndex("UserEquipmentIdSlot2")
                        .IsUnique()
                        .HasFilter("[UserEquipmentIdSlot2] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacters");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEquipments");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.BannerDropRate", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Banner.GachaBanner", "GachaBanner")
                        .WithMany("DropRates")
                        .HasForeignKey("GachaBannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GachaBanner");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBannerCharacter", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", "CharacterLevel")
                        .WithMany("GachaBannerCharacters")
                        .HasForeignKey("CharacterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Banner.GachaBanner", "GachaBanner")
                        .WithMany("GachaBannerCharacters")
                        .HasForeignKey("GachaBannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterLevel");

                    b.Navigation("GachaBanner");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBannerCurrency", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Banner.GachaBanner", "GachaBanner")
                        .WithMany("GachaBannerCurrencies")
                        .HasForeignKey("GachaBannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Item.Item", "Item")
                        .WithMany("GachaBannerCurrencies")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GachaBanner");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Character.Character", "Character")
                        .WithMany("CharacterLevels")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevelRequirement", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", "CharacterLevel")
                        .WithMany("CharacterLevelRequirements")
                        .HasForeignKey("CharacterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Item.Item", "Item")
                        .WithMany("CharacterLevelRequirements")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterLevel");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Equip.EquipLevel", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Equip.Equip", "Equip")
                        .WithMany("EquipmentEvolutions")
                        .HasForeignKey("EquipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equip");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserCharacter", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", "CharacterLevel")
                        .WithMany("UserCharacters")
                        .HasForeignKey("CharacterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.User.UserEquipment", "UserEquipmentSlot1")
                        .WithOne("UserCharacterSlot1")
                        .HasForeignKey("BlockyHeroesBackend.Domain.Entities.User.UserCharacter", "UserEquipmentIdSlot1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.User.UserEquipment", "UserEquipmentSlot2")
                        .WithOne("UserCharacterSlot2")
                        .HasForeignKey("BlockyHeroesBackend.Domain.Entities.User.UserCharacter", "UserEquipmentIdSlot2")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.User.User", "Owner")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterLevel");

                    b.Navigation("Owner");

                    b.Navigation("UserEquipmentSlot1");

                    b.Navigation("UserEquipmentSlot2");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserEquipment", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Equip.EquipLevel", "EquipLevel")
                        .WithMany("UserEquipment")
                        .HasForeignKey("EquipLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.User.User", "Owner")
                        .WithMany("UserEquipment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipLevel");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserItem", b =>
                {
                    b.HasOne("BlockyHeroesBackend.Domain.Entities.Item.Item", "Item")
                        .WithMany("UserItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockyHeroesBackend.Domain.Entities.User.User", "User")
                        .WithMany("UserItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Banner.GachaBanner", b =>
                {
                    b.Navigation("DropRates");

                    b.Navigation("GachaBannerCharacters");

                    b.Navigation("GachaBannerCurrencies");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.Character", b =>
                {
                    b.Navigation("CharacterLevels");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Character.CharacterLevel", b =>
                {
                    b.Navigation("CharacterLevelRequirements");

                    b.Navigation("GachaBannerCharacters");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Equip.Equip", b =>
                {
                    b.Navigation("EquipmentEvolutions");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Equip.EquipLevel", b =>
                {
                    b.Navigation("UserEquipment");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.Item.Item", b =>
                {
                    b.Navigation("CharacterLevelRequirements");

                    b.Navigation("GachaBannerCurrencies");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.User", b =>
                {
                    b.Navigation("UserCharacters");

                    b.Navigation("UserEquipment");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("BlockyHeroesBackend.Domain.Entities.User.UserEquipment", b =>
                {
                    b.Navigation("UserCharacterSlot1")
                        .IsRequired();

                    b.Navigation("UserCharacterSlot2")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
